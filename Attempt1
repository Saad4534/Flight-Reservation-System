#include<iostream>
#include<string.h>
#include<stdlib.h>
using namespace std;


const int MaxCity = 10;


struct flightNode {
    int flightNo;            	/* flight number */
    string departCity;          /* departure city */
    int timeDepart;          	/* departure time hhmm, e.g. 830, 1220, etc. */
    string arrivalCity;          	/* arrival city */
    int timeArrival;           	/* arrival time hhmm, e.g. 950, 1240, etc. */
    int noOfPassengers;       	/* number of passengers on the flight */
    flightNode *nextDeparture; 	/* next departure node from this city */
    flightNode *nextArrival; 	/* next arrival node to this city */
};


struct cityListNode {
    string cityName;           	   /* name of the city */
    flightNode *nextDeparture;    /* first departure from this city */
    flightNode *nextArrival;      /* first arrival to this city */
};

struct routeNode {
    int Day;                  /* day of travel: mmdd */
    int nHops;                /* Number of hops/intermediate flights */
    int FlightNo[10];         /* List of flight numbers for each hop */
};

struct reservationNode {	
    string firstName;         /* first name of the passenger */
    string lastName;          /* last name of the passenger */
    int tripType;            /* ROUNDTRIP or ONEWAY */
    routeNode routeForward;  /* Forward route (from source to destination) */
    routeNode routeBack;     /* Return route (from destination to source, only if ROUNDTRIP) */
    reservationNode *nextReserve; /* next reservation in linked list */
    reservationNode *reserveHead,*reserveTail;  /* head and tail of the reservation list */
};

cityListNode *citylist = new cityListNode[MaxCity];



void DataEntryDeparture(string Name,string arrival,string departure,int number,int depart,int arrive)
{
	flightNode *newnode = new flightNode;
	flightNode *temp = new flightNode;
	newnode->arrivalCity = arrival;
	newnode->departCity = departure;
	newnode->flightNo = number;
	newnode->timeDepart = depart;
	newnode->timeArrival = arrive;
	newnode->nextDeparture = NULL;
	
	for(int i=0;i<10;i++)
	{
		if(citylist[i].cityName == Name)
		{
			if(citylist[i].nextDeparture==NULL)
			{
				citylist[i].nextDeparture = newnode;
			}
			else
			{
				temp = citylist[i].nextDeparture;
				for(;temp!=NULL;temp=temp->nextDeparture)
				{
					if(temp->nextDeparture == NULL)
					{
						temp->nextDeparture = newnode;
						break;
					}
				}
			}
		}
	}
}

void DataEntryArrival(string Name,string arrival,string departure,int number,int depart,int arrive)
{
	flightNode *newnode = new flightNode;
	flightNode *temp;
	newnode->arrivalCity = arrival;
	newnode->departCity = departure;
	newnode->flightNo = number;
	newnode->timeDepart = depart;
	newnode->timeArrival = arrive;
	newnode->nextArrival = NULL;
	
	for(int i=0;i<10;i++)
	{
		if(citylist[i].cityName == Name)
		{
			if(citylist[i].nextArrival==NULL)
			{
				citylist[i].nextArrival = newnode;
			}
			else
			{
				temp = citylist[i].nextArrival;
				for(;temp!=NULL;temp=temp->nextArrival)
				{
					if(temp->nextArrival == NULL)
					{
						temp->nextArrival = newnode;
						break;
					}
				}
			}
		}
	}
}


void Allflights(cityListNode citylist[])
{
	system("cls");
	for(int i=0;i<10;i++)
	{
		cout<<"City Name: "<<citylist[i].cityName<<endl<<endl;
		cout<<"----------------------"<<endl;
		cout<<"Flight List Departure"<<endl;
		cout<<"----------------------"<<endl;
		for(flightNode *temp = citylist[i].nextDeparture;temp!=NULL;temp = temp->nextDeparture)
		{
			cout<<"Flight Number: "<<temp->flightNo<<endl;
			cout<<"Departure City: "<<temp->departCity<<"\t\t\t";
			cout<<"Arrival City: "<<temp->arrivalCity<<endl;
			cout<<"Departure Time: "<<temp->timeDepart<<"\t\t\t";
			cout<<"Arrival City: "<<temp->timeArrival<<endl;
		}
		cout<<endl;
		cout<<"----------------------"<<endl;
		cout<<"Flight List Arrival"<<endl;
		cout<<"----------------------"<<endl;
		for(flightNode *temp = citylist[i].nextArrival;temp!=NULL;temp = temp->nextArrival)
		{
			cout<<"Flight Number: "<<temp->flightNo<<endl;
			cout<<"Departure City: "<<temp->departCity<<"\t\t\t";
			cout<<"Arrival City: "<<temp->arrivalCity<<endl;
			cout<<"Departure Time: "<<temp->timeDepart<<"\t\t\t";
			cout<<"Arrival City: "<<temp->timeArrival<<endl;
		}
		cout<<endl;
		cout<<endl;
	}
	system("pause");
}




void swap(flightNode temp[],flightNode temp1[])
{
	flightNode *temp2 = new flightNode[1];
	temp2 = temp;
    temp = temp1;
    temp1 = temp2;
}

void ParticularArrival(cityListNode citylist[])
{
	system("cls");
	
	flightNode *temp = new flightNode[10];
	
	for(int i=0;i<10;i++)
	{
		temp[i].timeArrival = 0;
		temp[i].timeDepart = 0;
	}
	
	string cityname;
	cout<<"Enter the city name where do you want to go"<<endl;
	cin.ignore();
	getline(cin,cityname);
	
	for(int i=0;i<10;i++)
	{
		for(flightNode *temp1 = citylist[i].nextDeparture;temp1!=NULL;temp1=temp1->nextDeparture)
		{
			if(temp1->arrivalCity==cityname)
			{
				temp[i].arrivalCity = temp1->arrivalCity;
				temp[i].departCity = temp1->departCity;
				temp[i].flightNo = temp1->flightNo;
				temp[i].timeArrival = temp1->timeArrival;
				temp[i].timeDepart = temp1->timeDepart;
			}
		}
	}
	
	int n = 10; 
    for (int i = 0; i < 10; i++)
	{
	    for (int j = 1; j <  n; j++) 
	    {
	         if (temp[j].timeDepart < temp[j-1].timeDepart) 
			 {
	               swap(temp[j-1],temp[j]) ;
	         }
	    }
	}
	
	

	for(int i=0;i<10;i++)
	{
		if(temp[i].timeDepart!=0)
		{
			cout<<"------------------------------"<<endl;
		    cout<<"Flight List Departure"<<endl;
		    cout<<"------------------------------"<<endl;
		    cout<<"Flight Number: "<<temp[i].flightNo<<endl;
		    cout<<"Departure City: "<<temp[i].departCity<<"\t\t\t";
		    cout<<"Arrival City: "<<temp[i].arrivalCity<<endl;
		    cout<<"Departure Time: "<<temp[i].timeDepart<<"\t\t\t";
		    cout<<"Arrival City: "<<temp[i].timeArrival<<endl;
		}
	}
	system("pause");
}


void ParticularDeparture(cityListNode citylist[])
{
	system("cls");
	
	flightNode *temp = new flightNode[10];
	
	for(int i=0;i<10;i++)
	{
		temp[i].timeArrival = 0;
		temp[i].timeDepart = 0;
	}
	
	string cityname;
	cout<<"Enter the city name from where do you want to go"<<endl;
	cin.ignore();
	getline(cin,cityname);
	
	for(int i=0;i<10;i++)
	{
		for(flightNode *temp1 = citylist[i].nextArrival;temp1!=NULL;temp1=temp1->nextArrival)
		{
			if(temp1->departCity==cityname)
			{
				temp[i].arrivalCity = temp1->arrivalCity;
				temp[i].departCity = temp1->departCity;
				temp[i].flightNo = temp1->flightNo;
				temp[i].timeArrival = temp1->timeArrival;
				temp[i].timeDepart = temp1->timeDepart;
			}
		}
	}
	
	int n = 10; 
    for (int i = 0; i < 10; i++)
	{
	    for (int j = 1; j <  n; j++) 
	    {
	         if (temp[j].timeDepart < temp[j-1].timeDepart) 
			 {
	               swap(temp[j-1],temp[j]) ;
	         }
	    }
	}
	
	

	for(int i=0;i<10;i++)
	{
		if(temp[i].timeDepart!=0)
		{
			cout<<"------------------------------"<<endl;
		    cout<<"Flight List Departure"<<endl;
		    cout<<"------------------------------"<<endl;
		    cout<<"Flight Number: "<<temp[i].flightNo<<endl;
		    cout<<"Departure City: "<<temp[i].departCity<<"\t\t\t";
		    cout<<"Arrival City: "<<temp[i].arrivalCity<<endl;
		    cout<<"Departure Time: "<<temp[i].timeDepart<<"\t\t\t";
		    cout<<"Arrival City: "<<temp[i].timeArrival<<endl;
		}
	}
	system("pause");
}


void Reservation(cityListNode citylist[])
{
	string departcity;
	string arrivecity;
	cout<<"Where do you want to go ?"<<endl;
	cin.ignore();
	getline(cin,arrivecity);
	cout<<"From where do you want to go ?"<<endl;
	cin.ignore();
	getline(cin,departcity);
	
	for(int i=0;i<10;i++)
	{
		for(flightNode *temp = citylist[i].nextDeparture;temp!=NULL;temp=temp->nextDeparture)
		{
			
		}
	}
}



int main()
{
	
	citylist[0].cityName = "Lahore";
    citylist[1].cityName = "Karachi";
    citylist[2].cityName = "Kuwait";
    citylist[3].cityName = "Dubai";
    citylist[4].cityName = "Colombo";
    citylist[5].cityName = "Muscat";
    citylist[6].cityName = "Dacca";
    citylist[7].cityName = "Bangkok";
    citylist[8].cityName = "Manila";
    citylist[9].cityName = "Tokyo";
    
    DataEntryDeparture("Lahore","Karachi","Lahore",102,900,1030);
    DataEntryArrival("Lahore","Lahore","Karachi",201,2100,2230);
	
	DataEntryDeparture("Karachi","Lahore","Karachi",201,2100,2230);
    DataEntryDeparture("Karachi","Kuwait","Karachi",203,1130,1300);
	DataEntryDeparture("Karachi","Dubai","Karachi",204,1500,1600);
	DataEntryDeparture("Karachi","Colombo","Karachi",206,0700,1000);
	DataEntryArrival("Karachi","Karachi","Lahore",102,900,1030);
	DataEntryArrival("Karachi","Karachi","Kuwait",302,1400,1530);
	DataEntryArrival("Karachi","Karachi","Muscat",502,1900,2000);
	DataEntryArrival("Karachi","Karachi","Colombo",602,1900,2200);
	
	DataEntryDeparture("Kuwait","Karachi","Kuwait",302,1400,1530);
	DataEntryDeparture("Kuwait","Dubai","Kuwait",304,1400,1500);
	DataEntryArrival("Kuwait","Kuwait","Karachi",203,1130,1300);
	DataEntryArrival("Kuwait","Kuwait","Dubai",403,1600,1700);
	
	DataEntryDeparture("Dubai","Kuwait","Dubai",403,1600,1700);
	DataEntryDeparture("Dubai","Muscat","Dubai",405,1400,1500);
	DataEntryArrival("Dubai","Dubai","Kuwait",304,1400,1500);
	DataEntryArrival("Dubai","DUbai","Karachi",204,1500,1600);
	
	
	DataEntryDeparture("Colombo","Karachi","Colombo",602,1900,2200);
	DataEntryDeparture("Colombo","Dacca","Colombo",607,1100,1400);
	DataEntryArrival("Colombo","Colombo","Karachi",206,0700,1000);
	DataEntryArrival("Colombo","Colombo","Dacca",706,1500,1800);

	DataEntryDeparture("Muscat","Karachi","Muscat",502,1900,2000);
	DataEntryArrival("Muscat","Muscat","Dubai",405,1600,1700);

	DataEntryDeparture("Dacca","Colombo","Dacca",706,1500,1800);
	DataEntryDeparture("Dacca","Bangkok","Dacca",708,1500,1700);
	DataEntryDeparture("Dacca","Tokyo","Dacca",711,1500,1900);
	DataEntryArrival("Dacca","Dacca","Colombo",607,1100,1400);
	DataEntryArrival("Dacca","Dacca","Bangkok",807,1900,2100);
	DataEntryArrival("Dacca","Dacca","Tokyo",119,800,1200);
	
	DataEntryDeparture("Bangkok","Dacca","Bangkok",807,1900,2100);
	DataEntryDeparture("Bangkok","Manila","Bangkok",809,1800,2000);
	DataEntryArrival("Bangkok","Bangkok","Dacca",708,1500,1700);
	DataEntryArrival("Bangkok","Bangkok","Manila",908,2100,2300);
	
	DataEntryDeparture("Manila","Bangkok","Manila",908,2100,2300);
	DataEntryDeparture("Manila","Tokyo","Manila",911,2030,2330);
	DataEntryArrival("Manila","Manila","Bangkok",809,1800,2000);
	DataEntryArrival("Manila","Manila","Tokyo",119,0200,0500);
	
	DataEntryDeparture("Tokyo","Manila","Tokyo",119,0200,0500);
	DataEntryDeparture("Tokyo","Dacca","Tokyo",117,800,1200);
	DataEntryArrival("Tokyo","Tokyo","Manila",911,2030,2330);
	DataEntryArrival("Tokyo","Tokyo","Dacca",711,1500,1900);
	
	int option = -1;
	while(option!=0)
	{
		cout<<"*****Airline Reservation System*****"<<endl;
		cout<<"Enter Choice"<<endl;
		cout<<"1. List of all the cities serviced by airline "<<endl;
		cout<<"2. List of flight departures for a particular city"<<endl;
		cout<<"3. List of flight arrivals for a particular city"<<endl;
		cout<<"4. List of all the cities which can be reached from a particular city."<<endl;
		cout<<"5. List of cities in the shortest path between any two cities."<<endl;
		cout<<"6. Find the shortest route between any two cities."<<endl;
		cout<<"7. Make an airline reservation for a passenger between two cities."<<endl;
		cout<<"8. Print a passenger's reservation schedule."<<endl;
		cout<<"9. Delete a passenger's reservation."<<endl;
		cout<<"10. Print a list of passengers of a particular flight (in order of last name)."<<endl;
		cout<<"\nPress 0 to EXIT"<<endl<<endl;
		cin>>option;
		switch(option)
		{
			case 1:
				{
					Allflights(citylist);
					break;
				}
			case 2:
				{
					ParticularArrival(citylist);
					break;
				}
			case 3:
				{
					ParticularDeparture(citylist);
					break;
				}
			case 4:
				{
					break;
				}
			case 5:
				{
					break;
				}
			case 6:
				{
					break;
				}
			case 7:
				{
					Reservation(citylist);
					break;
				}
			case 8:
				{
					break;
				}
			case 9:
				{
					break;
				}
			case 10:
				{
					break;
				}									
		}
	}
}
